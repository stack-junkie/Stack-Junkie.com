---
import Icon from "./Icon.astro";
import { Image } from 'astro:assets';
import stackJunkieLogo from '../content/assets/Logo.png';
// import { name } from 'spectre:globals';

const path = Astro.url.pathname;
---
<nav class="effect-navbar-glass"> 
  <a class="effect-navbar-logo" href="/">
    <Image 
      src={stackJunkieLogo} 
      alt="Stack-Junkie" 
      class="effect-navbar-logo-image"
      width={50}
      height={50}
      loading="eager"
      format="webp"
    />
    <span class="effect-navbar-logo-text">Stack Junkie .com</span>
    <div class="effect-particle-container"></div>
  </a>
  <ul>
    <li>
      <a href="/blog" class:list={["effect-navbar-link", { active: path.startsWith('/blog') }]}>Blog</a>
    </li>
    <li class="nav-separator">/</li>
    <li>
      <a href="/projects" class:list={["effect-navbar-link", { active: path.startsWith('/projects') }]}>Projects</a>
    </li>
    <li class="nav-separator">/</li>
    <li>
      <input id="search" type="text" placeholder="Search (Ctrl+K)" class="effect-navbar-search" />
      <div id="search-results"></div>
    </li>
  </ul>
  <button class="mobile-nav-toggle">
    <Icon type="lucide" name="menu" width={24} height={24} class:list="menu-closed" />
    <Icon type="lucide" name="x" width={24} height={24} class:list="menu-open" />
  </button>
</nav>
<script is:inline>
  const searchElement = document.querySelector('#search');
  const results = document.querySelector('#search-results');
  const navToggle = document.querySelector('.mobile-nav-toggle');

  let focusIndex = -1;

  document.addEventListener('keydown', (e) => {
    if (e.key === 'k' && e.ctrlKey) {
      searchElement.focus();
    }

    if (e.key === 'Escape') {
      searchElement.blur();
      results.classList.remove('active');
      focusIndex = -1;
    }

    if (e.key === 'ArrowDown') {
      e.preventDefault();

      focusIndex++;
      const results = document.querySelectorAll('#search-results a');

      if (focusIndex >= results.length) {
        focusIndex = 0;
      }

      results[focusIndex]?.focus();
    }

    if (e.key === 'ArrowUp') {
      e.preventDefault();

      focusIndex--;
      const results = document.querySelectorAll('#search-results a');

      if (focusIndex < 0) {
        focusIndex = results.length - 1;
      }

      results[focusIndex]?.focus();
    }
  });

  let pagefindInitialized = false;

  searchElement?.addEventListener('focus', async () => {
    searchElement.placeholder = '';
    results.classList.add('active');
    
    // initialize pagefind on first focus
    if (!pagefindInitialized) {
      try {
        window.pagefind = await import("/pagefind/pagefind.js");
        await window.pagefind.init();
        pagefindInitialized = true;
      } catch (error) {
        console.error('Failed to initialize Pagefind:', error);
      }
    }
  });
  
  searchElement?.addEventListener('blur', () => {
    handleTabletChange();
    setTimeout(() => {
      if (!document.activeElement?.closest('#search-results')) {
        results.classList.remove('active');
        focusIndex = -1;
      }
    }, 1);
  });

  results?.addEventListener('focusout', (e) => {
    if (!e.relatedTarget?.closest('#search-results')) {
      results.classList.remove('active');
      focusIndex = -1;
    }
  });

  searchElement?.addEventListener('input', async (e) => {
    // only search if Pagefind is ready
    if (!pagefindInitialized) {
      return;
    }

    results.innerHTML = '';
    let searchResultHtml = '';

    const search = await window.pagefind.search(e.target.value);

    let i = 0;
    for (const result of search.results) {
      i++;

      const data = await result.data();
      
      searchResultHtml += `
        <a href="${data.url}">
          <h3 class="no-mt">${data.meta.title}</h3>
          <p>${data.excerpt}</p>
        </a>
        ${i < search.results.length ? '<hr class="separator">' : ''}
      `;
    }

    if (search.results.length === 0 && e.target.value.length > 0) {
      results.innerHTML = '<p style="margin-top: 0;">No results found</p>';
    } else {
      results.innerHTML = searchResultHtml;
    }

    results.classList.add('active');
  });

  navToggle?.addEventListener('click', () => {
    navToggle.classList.toggle('active');
    document.querySelector('nav').classList.toggle('active');
  });

  const handleTabletChange = () => {
    if (window.matchMedia('(max-width: 640px)').matches) {
      searchElement.placeholder = 'Search';
    } else {
      searchElement.placeholder = 'Search (Ctrl+K)';
    }
  }

  document.addEventListener('DOMContentLoaded', handleTabletChange);
  document.addEventListener('resize', handleTabletChange);

  // SCROLL-BASED HEADER BACKGROUND TRANSITION
  function handleHeaderScroll() {
    const nav = document.querySelector('nav');
    const hero = document.querySelector('.hero');
    
    if (!nav || !hero) return;
    
    // Calculate 50% of hero section height
    const heroHeight = hero.offsetHeight;
    const scrollThreshold = heroHeight * 0.5;
    const scrollY = window.scrollY;
    
    // Toggle 'effect-navbar-scrolled' class based on scroll position
    if (scrollY > scrollThreshold) {
      nav.classList.add('effect-navbar-scrolled');
    } else {
      nav.classList.remove('effect-navbar-scrolled');
    }
  }

  // Add scroll event listener
  window.addEventListener('scroll', handleHeaderScroll);
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', handleHeaderScroll);
  
  // LOGO PARTICLE BURST EFFECT
  function createParticleBurst() {
    const particlesContainer = document.querySelector('.effect-particle-container');
    if (!particlesContainer) return;
    
    // Clear existing particles
    particlesContainer.innerHTML = '';
    
    // Create 12 particles
    for (let i = 0; i < 12; i++) {
      const particle = document.createElement('div');
      particle.className = 'effect-particle';
      
      // Random direction and distance
      const angle = (i / 12) * Math.PI * 2;
      const distance = 20 + Math.random() * 30;
      const randomX = Math.cos(angle) * distance + 'px';
      const randomY = Math.sin(angle) * distance + 'px';
      
      particle.style.setProperty('--random-x', randomX);
      particle.style.setProperty('--random-y', randomY);
      particle.style.left = '50%';
      particle.style.top = '50%';
      particle.style.transform = 'translate(-50%, -50%)';
      
      // Random delay and duration
      const delay = Math.random() * 100;
      const duration = 600 + Math.random() * 200;
      
      particle.style.animation = `particleBurst ${duration}ms ease-out ${delay}ms forwards`;
      
      particlesContainer.appendChild(particle);
      
      // Remove particle after animation
      setTimeout(() => {
        if (particle.parentNode) {
          particle.parentNode.removeChild(particle);
        }
      }, duration + delay + 100);
    }
  }
  
  // Add hover event listeners for logo
  const siteTitleElement = document.querySelector('.effect-navbar-logo');
  if (siteTitleElement) {
    siteTitleElement.addEventListener('mouseenter', createParticleBurst);
  }
</script>
<style>
  /* Component-specific navbar layout styles */
  nav {
    /* POSITIONING: Sticky header that follows scroll */
    position: sticky;
    top: 0;
    width: 100%;
    
    /* LAYOUT: Flexbox for space-between alignment */
    display: flex;
    justify-content: space-between;
    align-items: center;
    
    /* TYPOGRAPHY: Bold condensed font to match logo */
    font-family: 'Impact', 'Bebas Neue', 'Oswald', 'Fjalla One', 'Geist', sans-serif;
    
    /* LAYERING: High z-index to stay above content */
    z-index: 50;
    
    /* SPACING: Internal padding */
    padding: 0.5rem 2rem;
    
    /* COLOR: White text */
    color: white;
  }

  nav ul {
    display: flex;
    gap: 1rem;
    margin: 0;
    padding: 0;
    list-style-type: none;
    align-items: center;
  }

  nav ul li {
    position: relative;
  }

  #search-results {
    position: absolute;
    top: calc(100% + .5rem);
    right: 0;
    background-color: #252525;
    border: 1px solid var(--primary);
    display: none;
    width: 200%;
    z-index: 10;
    padding: .5rem;
  }

  #search-results.active:has(*) {
    display: block;
  }

  .mobile-nav-toggle {
    display: none;
    width: 40px;
    height: 40px;
    background-color: #121212;
    border: 1px solid #353535;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
  }

  .menu-open {
    display: none;
  }

  .mobile-nav-toggle.active .menu-open {
    display: flex;
  }

  .mobile-nav-toggle.active .menu-closed {
    display: none;
  }

  @media screen and (max-width: 640px) {
    nav {
      padding: 0 1rem;
      padding-top: 1rem;
      transition: all .25s ease;
    }

    .mobile-nav-toggle {
      display: flex;
    }

    .nav-separator {
      display: none;
    }

    nav ul {
      flex-direction: column;
      gap: 0;
      position: absolute;
      width: 100%;
      top: calc(1rem + 40px);
      right: 0;
      padding: 1rem;
      z-index: 1;
      opacity: 0;
      pointer-events: none;
      transition: all .25s ease;
      user-select: none;
      height: calc(100vh - 1rem - 40px);
      align-items: start;
    }

    nav.active {
      background-color: #181818;
    }

    nav.active ul {
      opacity: 1;
      pointer-events: all;
      background-color: #181818;
    }
    
    .effect-navbar-logo {
      font-size: 1.2em;
      padding: 0.4rem 0.8rem;
    }

    nav ul li {
      position: relative;
      transition: all .25s ease-out;
      top: -1.5rem;
      border-bottom: 1px solid #353535;
      width: 100%;
      max-width: none;
      padding: 0;
      font-size: 16px;
    }
  
    nav ul li a {
      display: block;
      padding: .75rem 0;
      width: 100%;
      padding-left: 1rem;
    }

    nav ul li:first-child {
      border-top: 1px solid #353535;
    }

    nav.active ul li {
      top: 0;
    }

    .effect-navbar-search {
      width: 100%;
      max-width: none;
      padding: .75rem 1rem;
    }

    #search-results {
      width: 100%;
      top: 100%;
      font-size: 16px;
    }
  }
</style>
<style is:global>
  #search-results a {
    display: block;
    text-decoration: none;
    color: white !important;
    padding: .5rem;
    font-size: 16px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
  }

  #search-results a:hover, #search-results a:focus-visible {
    background-color: var(--primary);
    outline: none;
    transform: translateY(-1px);
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
  }

  #search-results a:hover mark, #search-results a:focus-visible mark {
    background-color: #ffffff;
    color: #000000;
  }

  #search-results a h3 {
    margin-bottom: .5rem;
  }

  #search-results a p {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  #search-results mark {
    background-color: var(--primary);
    color: white;
  }

  .separator {
    margin: .5rem .5rem;
    border: none;
    height: 1px;
    background-color: #353535;
  }
</style>